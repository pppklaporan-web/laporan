{
  "name": "Laporan Harian PPPK",
  "short_name": "Laporan Harian",
  "start_url": "index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3273dc",
  "icons": [
    { "src": "icon-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "icon-512.png", "sizes": "512x512", "type": "image/png" }
  ]
}

self.addEventListener("install", (e) => {
  e.waitUntil(
    caches.open("laporan-cache").then((cache) => {
      return cache.addAll(["./", "./index.html", "./manifest.json"]);
    })
  );
});

self.addEventListener("fetch", (e) => {
  e.respondWith(
    caches.match(e.request).then((response) => {
      return response || fetch(e.request);
    })
  );
});

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
    <meta name="theme-color" content="#3273dc" />
    <link rel="manifest" href="manifest.json" />
    <link rel="icon" href="icon-192.png" type="image/png" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css" />
    <title>LAPORAN HARIAN PPPK with File Upload</title>
    <style>
      body { padding: 0.5rem; font-size: 16px; }
      h1.title { font-size: 1.2rem; text-align: center; line-height: 1.4; }
      form.container { margin: 1rem auto; padding: 1rem; max-width: 95%; }
      input.input, textarea.textarea { width: 100%; }
      .file-label { font-size: 0.9rem; }
      button.button { width: 100%; margin-top: 0.5rem; }
      @media (min-width: 768px) { button.button { width: auto; } }
    </style>
  </head>
  <body>
    <section class="hero is-primary is-bold">
      <div class="hero-body">
        <div class="container">
          <h1 class="title">Laporan Harian Ryan Oktarino BPS Provinsi Sumatera Barat</h1>
        </div>
      </div>
    </section>

    <form id="form" class="container m-4 pl-4">
      <div class="field">
        <label class="label">Tanggal</label>
        <div class="control">
          <input class="input" type="date" placeholder="Tanggal" name="Tanggal" />
        </div>
      </div>
      <div class="field">
        <label class="label">Jam</label>
        <div class="control">
          <input class="input" type="time" placeholder="Jam" name="Jam" />
        </div>
      </div>
      <div class="field">
        <label class="label">Tim Kerja</label>
        <div class="control">
          <label class="radio"><input type="radio" name="Tim Kerja" value="Rumah Tangga" /> Rumah Tangga</label>
          <label class="radio"><input type="radio" name="Tim Kerja" value="IT Suporting" /> IT Suporting</label>
          <label class="radio"><input type="radio" name="Tim Kerja" value="Humas dan Protokol" /> Humas dan Protokol</label>
          <label class="radio"><input type="radio" name="Tim Kerja" value="PPID" /> PPID</label>
        </div>
      </div>
      <div class="field">
        <label class="label">Laporan Kegiatan</label>
        <div class="control">
          <textarea class="textarea" placeholder="Tuliskan kegiatan harian" name="Laporan Kegiatan"></textarea>
        </div>
      </div>
      <div class="control">
        <a class="button is-link" id="open-sheet-button" href="https://docs.google.com/spreadsheets/d/1aZM8brs-r9ZUYtLtEnj5SDedfMqtcvNhxBGRTmnkbzc/edit?usp=sharing" target="_blank" rel="noopener noreferrer">LAPORAN BULANAN</a>
      </div>
      <div class="field">
        <label class="label">Upload Document (Optional)</label>
        <div class="control">
          <div class="file has-name is-fullwidth">
            <label class="file-label">
              <input class="file-input" type="file" name="theFile" id="fileInput" accept="*/*" />
              <span class="file-cta">
                <span class="file-icon"><i class="fas fa-upload"></i></span>
                <span class="file-label">Choose a fileâ€¦</span>
              </span>
              <span class="file-name" id="fileNameDisplay">No file selected</span>
            </label>
          </div>
        </div>
      </div>
      <input type="hidden" name="filename" id="actualFilename" />
      <div class="field is-grouped is-grouped-centered is-flex-direction-column-mobile">
        <div class="control">
          <button class="button is-primary" type="submit" id="submit-button">Sign Up</button>
        </div>
        <div class="control">
          <button class="button is-danger" type="button" onclick="document.getElementById('form').reset(); document.getElementById('fileNameDisplay').textContent = 'No file selected';">Cancel</button>
        </div>
      </div>
    </form>

    <div id="message" style="display: none; margin: 20px; padding: 10px; border-radius: 4px; font-weight: bold;"></div>

    <script>
      const form = document.getElementById("form");
      const submitButton = document.getElementById("submit-button");
      const messageDiv = document.getElementById("message");
      const fileInput = document.getElementById("fileInput");
      const fileNameDisplay = document.getElementById("fileNameDisplay");

      fileInput.addEventListener("change", function () {
        fileNameDisplay.textContent = this.files.length > 0 ? this.files[0].name : "No file selected";
      });

      async function uploadFile(file) {
        return new Promise((resolve, reject) => {
          const fr = new FileReader();
          fr.onload = (e) => {
            const data = e.target.result.split(",");
            const obj = { fileName: file.name, mimeType: data[0].match(/:(\w.+);/)[1], data: data[1] };
            resolve(obj);
          };
          fr.onerror = reject;
          fr.readAsDataURL(file);
        });
      }

      form.addEventListener("submit", async function (e) {
        e.preventDefault();
        messageDiv.textContent = "Submitting...";
        messageDiv.style.display = "block";
        messageDiv.style.backgroundColor = "beige";
        messageDiv.style.color = "black";
        submitButton.disabled = true;
        submitButton.classList.add("is-loading");
        try {
          const formData = new FormData(this);
          const formDataObj = {};
          for (let [key, value] of formData.entries()) { formDataObj[key] = value; }
          if (fileInput.files.length > 0) {
            const fileObj = await uploadFile(fileInput.files[0]);
            formDataObj.fileData = fileObj;
          }
          const scriptURL = "https://script.google.com/macros/s/AKfycby_Wz09XLAbX1qRQAo6eoaOO4e1py5F8-4KInnFX0M4lPKxsvzybsmoojXLwo4rPzmt/exec";
          const response = await fetch(scriptURL, { redirect: "follow", method: "POST", body: JSON.stringify(formDataObj), headers: { "Content-Type": "text/plain;charset=utf-8" } });
          const data = await response.json();
          if (data.status === "success") {
            messageDiv.textContent = data.message || "Data submitted successfully!";
            messageDiv.style.backgroundColor = "#ff3e00";
            messageDiv.style.color = "white";
            form.reset();
            fileNameDisplay.textContent = "No file selected";
          } else { throw new Error(data.message || "Submission failed"); }
        } catch (error) {
          messageDiv.textContent = "Error: " + error.message;
          messageDiv.style.backgroundColor = "#f14668";
          messageDiv.style.color = "white";
        } finally {
          submitButton.disabled = false;
          submitButton.classList.remove("is-loading");
          setTimeout(() => { messageDiv.textContent = ""; messageDiv.style.display = "none"; }, 4000);
        }
      });

      if ("serviceWorker" in navigator) { navigator.serviceWorker.register("sw.js").catch(console.error); }
    </script>
  </body>
</html>
